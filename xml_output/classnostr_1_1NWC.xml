<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classnostr_1_1NWC" kind="class" language="C++" prot="public">
    <compoundname>nostr::NWC</compoundname>
    <includes refid="NWC_8h" local="no">NWC.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnostr_1_1NWC_1a2239b9e7855ba020c506e59428fdbd7f" prot="private" static="no" mutable="no">
        <type><ref refid="classnostr_1_1Transport" kindref="compound">Transport</ref> *</type>
        <definition>Transport* nostr::NWC::transport</definition>
        <argsstring></argsstring>
        <name>transport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="162" column="15" bodyfile="src/services/NWC.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnostr_1_1NWC_1a64e20da0cb656e14c288efd8f3aa5534" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classnostr_1_1NostrPool" kindref="compound">NostrPool</ref> &gt;</type>
        <definition>std::unique_ptr&lt;NostrPool&gt; nostr::NWC::pool</definition>
        <argsstring></argsstring>
        <name>pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="164" column="21" bodyfile="src/services/NWC.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnostr_1_1NWC_1a9a250bf17aa4ae28f0ea6914c02e836f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacenostr_1acd41d0899a1d0f921c44a1a91b6c0eed" kindref="member">NWCData</ref></type>
        <definition>NWCData nostr::NWC::nwc</definition>
        <argsstring></argsstring>
        <name>nwc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="165" column="13" bodyfile="src/services/NWC.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnostr_1_1NWC_1af2faec8801bca62d8f26e958a47087bd" prot="private" static="no" mutable="no">
        <type><ref refid="classnostr_1_1Nip47" kindref="compound">Nip47</ref></type>
        <definition>Nip47 nostr::NWC::nip47</definition>
        <argsstring></argsstring>
        <name>nip47</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="166" column="11" bodyfile="src/services/NWC.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnostr_1_1NWC_1af240280eb44a9d7bbca6ee670de86014" prot="private" static="no" mutable="no">
        <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
        <definition>NostrString nostr::NWC::accountPubKey</definition>
        <argsstring></argsstring>
        <name>accountPubKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="167" column="17" bodyfile="src/services/NWC.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classnostr_1_1NWC_1aa466702d6c03ebed9dcd2e285ab783b6" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classnostr_1_1NWCResponseCallbackBase" kindref="compound">NWCResponseCallbackBase</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;NWCResponseCallbackBase&gt; &gt; nostr::NWC::callbacks</definition>
        <argsstring></argsstring>
        <name>callbacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="168" column="17" bodyfile="src/services/NWC.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classnostr_1_1NWC_1aa776fd16b22ee081a1ba837f7498edd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NWC::~NWC</definition>
        <argsstring>()</argsstring>
        <name>~NWC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="49" column="5" bodyfile="src/services/NWC.cpp" bodystart="6" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a7ce0d1f12d37b1f1217fd16240137e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>NWC::NWC</definition>
        <argsstring>(Transport *transport, NostrString nwcUrl)</argsstring>
        <name>NWC</name>
        <param>
          <type><ref refid="classnostr_1_1Transport" kindref="compound">Transport</ref> *</type>
          <declname>transport</declname>
        </param>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>nwcUrl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a standalone <ref refid="classnostr_1_1NWC" kindref="compound">NWC</ref> service <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transport</parametername>
</parameternamelist>
<parameterdescription>
<para>A transport object, you can get one for the <ref refid="namespacenostr_1_1esp32" kindref="compound">esp32</ref> platform using <ref refid="namespacenostr_1_1esp32_1_1ESP32Platform_1abe46d31af712a8dc70582da944ce1229" kindref="member">nostr::esp32::ESP32Platform::getTransport()</ref> , for other platforms you need to implement the <ref refid="classnostr_1_1Transport" kindref="compound">Transport</ref> interface </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nwcUrl</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classnostr_1_1NWC" kindref="compound">NWC</ref> connection URL </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="55" column="5" bodyfile="src/services/NWC.cpp" bodystart="10" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a986c7fa8b9480303f19be584b575e611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::loop</definition>
        <argsstring>()</argsstring>
        <name>loop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tick the main loop. This should be called in the <ref refid="classnostr_1_1NWC_1a986c7fa8b9480303f19be584b575e611" kindref="member">loop()</ref> function of your sketch </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="60" column="10" bodyfile="src/services/NWC.cpp" bodystart="29" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1aa549023b05bdf32ecb43bf6587db9428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::close</definition>
        <argsstring>()</argsstring>
        <name>close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the service, after this you should throw away the <ref refid="classnostr_1_1NWC" kindref="compound">NWC</ref> object </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="65" column="10" bodyfile="src/services/NWC.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1ad1273a9db63479d103ede6af0657c1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::payInvoice</definition>
        <argsstring>(NostrString invoice, unsigned long amount=static_cast&lt; unsigned long &gt;(-1), std::function&lt; void(PayInvoiceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>payInvoice</name>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>invoice</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>amount</declname>
          <defval>static_cast&lt; unsigned long &gt;(-1)</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1aabe8d230016fd5f70285adbcbe77fe23" kindref="member">PayInvoiceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pay a lightning invoice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoice</parametername>
</parameternamelist>
<parameterdescription>
<para>The invoice to pay </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to pay, if not specified the full amount will be paid (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is successful (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="74" column="10" bodyfile="src/services/NWC.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1aba3161e7f5badbc631e7c861c4557107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::multiPayInvoice</definition>
        <argsstring>(std::initializer_list&lt; Invoice &gt; invoices, std::function&lt; void(MultiPayInvoiceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>multiPayInvoice</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="namespacenostr_1ac0f491ca12edeaa060bf89f8349d1c94" kindref="member">Invoice</ref> &gt;</type>
          <declname>invoices</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a0fb78e894360c3b4167124456e18cc1b" kindref="member">MultiPayInvoiceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pay multiple lightning invoices <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoices</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of invoices to pay </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is successful (nb. it will be called once for each invoice) (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="83" column="10" bodyfile="src/services/NWC.cpp" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a3838a879e0864c482285f4883fea997f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::payKeySend</definition>
        <argsstring>(NostrString pubkey, unsigned long amount, NostrString preimage=&quot;&quot;, std::initializer_list&lt; TLVRecords &gt; tlv={}, std::function&lt; void(PayKeySendResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>payKeySend</name>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>preimage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::initializer_list&lt; <ref refid="namespacenostr_1ad0f4687c761ee6988b42826d3ea717f6" kindref="member">TLVRecords</ref> &gt;</type>
          <declname>tlv</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a70810c5e5dbfe96e16ae12fd2990e6d6" kindref="member">PayKeySendResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a keysend payment <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>The pubkey to send to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preimage</parametername>
</parameternamelist>
<parameterdescription>
<para>The preimage to use (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlv</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of TLV records to include (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is successful (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="94" column="10" bodyfile="src/services/NWC.cpp" bodystart="104" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a334c69af60cc76d8c32ba4f8fa3d621a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::multiPayKeySend</definition>
        <argsstring>(std::initializer_list&lt; KeySend &gt; keySends, std::function&lt; void(MultiPayKeySendResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>multiPayKeySend</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="namespacenostr_1a2f0adf8fb06541c0734900f1f37c6a77" kindref="member">KeySend</ref> &gt;</type>
          <declname>keySends</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1af6e0f43f7f982a4b4fe1a1c097cf9de3" kindref="member">MultiPayKeySendResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send multiple keysend payments <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keySends</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of keysend payments to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is successful (nb. it will be called once for each keysend) (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="103" column="10" bodyfile="src/services/NWC.cpp" bodystart="119" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a54556399de8c19c5a3c72b3262616b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::makeInvoice</definition>
        <argsstring>(unsigned long amount, NostrString description=&quot;&quot;, NostrString descriptionHash=&quot;&quot;, unsigned long expiry=0, std::function&lt; void(MakeInvoiceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>makeInvoice</name>
        <param>
          <type>unsigned long</type>
          <declname>amount</declname>
        </param>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>description</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>descriptionHash</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>expiry</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a784f3d1260b727625d00d370c0ac9e9f" kindref="member">MakeInvoiceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a lightning invoice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to invoice </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>A description of the invoice (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptionHash</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash of the description (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiry</parametername>
</parameternamelist>
<parameterdescription>
<para>The expiry time of the invoice in seconds (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the invoice is created (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the invoice creation fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="114" column="10" bodyfile="src/services/NWC.cpp" bodystart="132" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a8c34f915eae08833ca38ca62f0811cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::lookUpPaymentHash</definition>
        <argsstring>(NostrString paymentHash, std::function&lt; void(LookUpInvoiceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>lookUpPaymentHash</name>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>paymentHash</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a9357541c46480c78b10dbd47531ce2d7" kindref="member">LookUpInvoiceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up a payment hash <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paymentHash</parametername>
</parameternamelist>
<parameterdescription>
<para>The payment hash to look up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is found (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the payment is not found (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="123" column="10" bodyfile="src/services/NWC.cpp" bodystart="146" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a3e6bf85d69624a302cdce0db89f942b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::lookUpInvoice</definition>
        <argsstring>(NostrString invoice, std::function&lt; void(LookUpInvoiceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>lookUpInvoice</name>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>invoice</declname>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a9357541c46480c78b10dbd47531ce2d7" kindref="member">LookUpInvoiceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Look up an invoice <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>invoice</parametername>
</parameternamelist>
<parameterdescription>
<para>The invoice to look up </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the invoice is found (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the invoice is not found (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="131" column="10" bodyfile="src/services/NWC.cpp" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a77246d9ec254155500dfd35a3ed46f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::listTransactions</definition>
        <argsstring>(unsigned long from=0, unsigned long until=0, int limit=0, int offset=0, bool unpaid=false, NostrString type=&quot;&quot;, std::function&lt; void(ListTransactionsResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>listTransactions</name>
        <param>
          <type>unsigned long</type>
          <declname>from</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>until</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unpaid</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
          <declname>type</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a5fd7239e7510091c73ba2602f4a6bc3d" kindref="member">ListTransactionsResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List transactions <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>The start time of the transactions to list (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>until</parametername>
</parameternamelist>
<parameterdescription>
<para>The end time of the transactions to list (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of transactions to list (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of the transactions to list (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unpaid</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to list only unpaid transactions (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of transactions to list (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the transactions are listed (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the transactions listing fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="144" column="10" bodyfile="src/services/NWC.cpp" bodystart="174" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1a55874260c4af288a620e0b19d62ea949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::getBalance</definition>
        <argsstring>(std::function&lt; void(GetBalanceResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>getBalance</name>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1a42570ba6e2e70160a34b1746331f5bff" kindref="member">GetBalanceResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the balance <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the balance is retrieved (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the balance retrieval fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="152" column="10" bodyfile="src/services/NWC.cpp" bodystart="189" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classnostr_1_1NWC_1ad646581995f7b719a14d46f26e000896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void NWC::getInfo</definition>
        <argsstring>(std::function&lt; void(GetInfoResponse)&gt; onRes=nullptr, std::function&lt; void(NostrString, NostrString)&gt; onErr=nullptr)</argsstring>
        <name>getInfo</name>
        <param>
          <type>std::function&lt; void(<ref refid="namespacenostr_1af3dc0dbf7fa69605d5ad971a37c5fe7f" kindref="member">GetInfoResponse</ref>)&gt;</type>
          <declname>onRes</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::function&lt; void(<ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>, <ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref>)&gt;</type>
          <declname>onErr</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the info <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>onRes</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the info is retrieved (optional) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>onErr</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback that will be called when the info retrieval fails (optional) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="159" column="10" bodyfile="src/services/NWC.cpp" bodystart="203" bodyend="215"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnostr_1_1NWC_1a4286f82ac9118dfaa4c347a6d966261a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="NostrString_8h_1a51a5cc014ebe5eb0fda73fcf0e09b626" kindref="member">NostrString</ref></type>
        <definition>NostrString NWC::sendEvent</definition>
        <argsstring>(SignedNostrEvent *ev)</argsstring>
        <name>sendEvent</name>
        <param>
          <type><ref refid="classnostr_1_1SignedNostrEvent" kindref="compound">SignedNostrEvent</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/services/NWC.h" line="163" column="17" bodyfile="src/services/NWC.cpp" bodystart="50" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class to interact with the Nostr Wallet Connect services without dealing with the underlying transport </para>
    </detaileddescription>
    <location file="src/services/NWC.h" line="47" column="1" bodyfile="src/services/NWC.h" bodystart="47" bodyend="169"/>
    <listofallmembers>
      <member refid="classnostr_1_1NWC_1af240280eb44a9d7bbca6ee670de86014" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>accountPubKey</name></member>
      <member refid="classnostr_1_1NWC_1aa466702d6c03ebed9dcd2e285ab783b6" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>callbacks</name></member>
      <member refid="classnostr_1_1NWC_1aa549023b05bdf32ecb43bf6587db9428" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>close</name></member>
      <member refid="classnostr_1_1NWC_1a55874260c4af288a620e0b19d62ea949" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>getBalance</name></member>
      <member refid="classnostr_1_1NWC_1ad646581995f7b719a14d46f26e000896" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>getInfo</name></member>
      <member refid="classnostr_1_1NWC_1a77246d9ec254155500dfd35a3ed46f87" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>listTransactions</name></member>
      <member refid="classnostr_1_1NWC_1a3e6bf85d69624a302cdce0db89f942b6" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>lookUpInvoice</name></member>
      <member refid="classnostr_1_1NWC_1a8c34f915eae08833ca38ca62f0811cdc" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>lookUpPaymentHash</name></member>
      <member refid="classnostr_1_1NWC_1a986c7fa8b9480303f19be584b575e611" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>loop</name></member>
      <member refid="classnostr_1_1NWC_1a54556399de8c19c5a3c72b3262616b9c" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>makeInvoice</name></member>
      <member refid="classnostr_1_1NWC_1aba3161e7f5badbc631e7c861c4557107" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>multiPayInvoice</name></member>
      <member refid="classnostr_1_1NWC_1a334c69af60cc76d8c32ba4f8fa3d621a" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>multiPayKeySend</name></member>
      <member refid="classnostr_1_1NWC_1af2faec8801bca62d8f26e958a47087bd" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>nip47</name></member>
      <member refid="classnostr_1_1NWC_1a9a250bf17aa4ae28f0ea6914c02e836f" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>nwc</name></member>
      <member refid="classnostr_1_1NWC_1a7ce0d1f12d37b1f1217fd16240137e3b" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>NWC</name></member>
      <member refid="classnostr_1_1NWC_1ad1273a9db63479d103ede6af0657c1c9" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>payInvoice</name></member>
      <member refid="classnostr_1_1NWC_1a3838a879e0864c482285f4883fea997f" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>payKeySend</name></member>
      <member refid="classnostr_1_1NWC_1a64e20da0cb656e14c288efd8f3aa5534" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>pool</name></member>
      <member refid="classnostr_1_1NWC_1a4286f82ac9118dfaa4c347a6d966261a" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>sendEvent</name></member>
      <member refid="classnostr_1_1NWC_1a2239b9e7855ba020c506e59428fdbd7f" prot="private" virt="non-virtual"><scope>nostr::NWC</scope><name>transport</name></member>
      <member refid="classnostr_1_1NWC_1aa776fd16b22ee081a1ba837f7498edd2" prot="public" virt="non-virtual"><scope>nostr::NWC</scope><name>~NWC</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
