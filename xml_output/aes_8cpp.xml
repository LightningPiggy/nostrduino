<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="aes_8cpp" kind="file" language="C++">
    <compoundname>aes.cpp</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="aes_8h" local="yes">aes.h</includes>
    <incdepgraph>
      <node id="3">
        <label>aes.h</label>
        <link refid="aes_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="1">
        <label>src/aes.cpp</label>
        <link refid="aes_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="aes_8cpp_1a1ae104196f1fc7af4751c5b9e07b1610" prot="public" static="no">
        <name>Nb</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="45" column="9" bodyfile="src/aes.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" prot="public" static="no">
        <name>Nk</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="48" column="13" bodyfile="src/aes.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" prot="public" static="no">
        <name>Nr</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="49" column="13" bodyfile="src/aes.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1a1dd86ce8e7ff32d6456f34c281c7e2a9" prot="public" static="no">
        <name>MULTIPLY_AS_A_FUNCTION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="62" column="11" bodyfile="src/aes.cpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" prot="public" static="no">
        <name>getSBoxValue</name>
        <param><defname>num</defname></param>
        <initializer>(sbox[(num)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="143" column="9" bodyfile="src/aes.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" prot="public" static="no">
        <name>Multiply</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>      (  ((y &amp; 1) * x) ^                              \
      ((y&gt;&gt;1 &amp; 1) * xtime(x)) ^                       \
      ((y&gt;&gt;2 &amp; 1) * xtime(xtime(x))) ^                \
      ((y&gt;&gt;3 &amp; 1) * xtime(xtime(xtime(x)))) ^         \
      ((y&gt;&gt;4 &amp; 1) * xtime(xtime(xtime(xtime(x))))))   \</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="329" column="10" bodyfile="src/aes.cpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="aes_8cpp_1a4223d41bc5587f9c0b6e499004403967" prot="public" static="no">
        <name>getSBoxInvert</name>
        <param><defname>num</defname></param>
        <initializer>(rsbox[(num)])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="345" column="9" bodyfile="src/aes.cpp" bodystart="345" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t state_t[4][4]</definition>
        <argsstring>[4][4]</argsstring>
        <name>state_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="72" column="17" bodyfile="src/aes.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="aes_8cpp_1adc15aeb43c81de1162045eedf437f407" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t sbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>sbox</name>
        <initializer>= {
  
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="79" column="22" bodyfile="src/aes.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="aes_8cpp_1a5fb4523234538d83676ef33a45b18fd1" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t rsbox[256]</definition>
        <argsstring>[256]</argsstring>
        <name>rsbox</name>
        <initializer>= {
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="99" column="22" bodyfile="src/aes.cpp" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="aes_8cpp_1a3df33234825216ec54d6e87859eda5b2" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t Rcon[11]</definition>
        <argsstring>[11]</argsstring>
        <name>Rcon</name>
        <initializer>= {
  0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="120" column="22" bodyfile="src/aes.cpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="aes_8cpp_1aa53b7196594437ebb4f435b04fd254db" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void KeyExpansion</definition>
        <argsstring>(uint8_t *RoundKey, const uint8_t *Key)</argsstring>
        <name>KeyExpansion</name>
        <param>
          <type>uint8_t *</type>
          <declname>RoundKey</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>Key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="146" column="13" bodyfile="src/aes.cpp" bodystart="146" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1af6103754d8f46cb642b0041973e4102e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_init_ctx</definition>
        <argsstring>(struct AES_ctx *ctx, const uint8_t *key)</argsstring>
        <name>AES_init_ctx</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="219" column="6" bodyfile="src/aes.cpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a99d17d22ed909bd155007cdece29263a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_init_ctx_iv</definition>
        <argsstring>(struct AES_ctx *ctx, const uint8_t *key, const uint8_t *iv)</argsstring>
        <name>AES_init_ctx_iv</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="224" column="6" bodyfile="src/aes.cpp" bodystart="224" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1afbdec54757622549b63838ea2fbc3cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_ctx_set_iv</definition>
        <argsstring>(struct AES_ctx *ctx, const uint8_t *iv)</argsstring>
        <name>AES_ctx_set_iv</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="229" column="6" bodyfile="src/aes.cpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1aec2e2ab202ebb6ef781d984894df6b60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AddRoundKey</definition>
        <argsstring>(uint8_t round, state_t *state, const uint8_t *RoundKey)</argsstring>
        <name>AddRoundKey</name>
        <param>
          <type>uint8_t</type>
          <declname>round</declname>
        </param>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>RoundKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="237" column="13" bodyfile="src/aes.cpp" bodystart="237" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1ae12b3155973ad5c484594926a343b184" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SubBytes</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>SubBytes</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="251" column="13" bodyfile="src/aes.cpp" bodystart="251" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1ae22a5cef2b7a9a885c182c95c4d62f6b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ShiftRows</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>ShiftRows</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="266" column="13" bodyfile="src/aes.cpp" bodystart="266" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a6a04d27e5fba818ef334a77ef130f1b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t xtime</definition>
        <argsstring>(uint8_t x)</argsstring>
        <name>xtime</name>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="294" column="16" bodyfile="src/aes.cpp" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a8f2327d404c64b297125e913449a8c66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void MixColumns</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>MixColumns</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="300" column="13" bodyfile="src/aes.cpp" bodystart="300" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a2643c586e22197943294eeb877fec242" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InvMixColumns</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>InvMixColumns</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="350" column="13" bodyfile="src/aes.cpp" bodystart="350" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1acae838b82d6c1f4f04ca0f0ede0a3c3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InvSubBytes</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>InvSubBytes</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="371" column="13" bodyfile="src/aes.cpp" bodystart="371" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1ac23198b06615bcf66f9b1c23c22bbf68" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InvShiftRows</definition>
        <argsstring>(state_t *state)</argsstring>
        <name>InvShiftRows</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="383" column="13" bodyfile="src/aes.cpp" bodystart="383" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a7b0b38e04c73cdcaa4cd9459ac801f3b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Cipher</definition>
        <argsstring>(state_t *state, const uint8_t *RoundKey)</argsstring>
        <name>Cipher</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>RoundKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="413" column="13" bodyfile="src/aes.cpp" bodystart="413" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1af0cd2ffba77fd2b421a4ee9e7beea7bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InvCipher</definition>
        <argsstring>(state_t *state, const uint8_t *RoundKey)</argsstring>
        <name>InvCipher</name>
        <param>
          <type><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref> *</type>
          <declname>state</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>RoundKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="439" column="13" bodyfile="src/aes.cpp" bodystart="439" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a233447aeecf56715c358c518acb908ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_ECB_encrypt</definition>
        <argsstring>(const struct AES_ctx *ctx, uint8_t *buf)</argsstring>
        <name>AES_ECB_encrypt</name>
        <param>
          <type>const struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="470" column="6" bodyfile="src/aes.cpp" bodystart="470" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1aa82deb7667cd7b19bbe783d2990642ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_ECB_decrypt</definition>
        <argsstring>(const struct AES_ctx *ctx, uint8_t *buf)</argsstring>
        <name>AES_ECB_decrypt</name>
        <param>
          <type>const struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="476" column="6" bodyfile="src/aes.cpp" bodystart="476" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a36dff235795b5c6a21237ecf7125eb5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void XorWithIv</definition>
        <argsstring>(uint8_t *buf, const uint8_t *Iv)</argsstring>
        <name>XorWithIv</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>Iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="492" column="13" bodyfile="src/aes.cpp" bodystart="492" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a296bd30323044b07d69e0e3b5f676281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_CBC_encrypt_buffer</definition>
        <argsstring>(struct AES_ctx *ctx, uint8_t *buf, size_t length)</argsstring>
        <name>AES_CBC_encrypt_buffer</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="501" column="6" bodyfile="src/aes.cpp" bodystart="501" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1a0672c442747b26b691202c493a08a104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_CBC_decrypt_buffer</definition>
        <argsstring>(struct AES_ctx *ctx, uint8_t *buf, size_t length)</argsstring>
        <name>AES_CBC_decrypt_buffer</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="516" column="6" bodyfile="src/aes.cpp" bodystart="516" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="aes_8cpp_1aa585f26e880ce9a112dc4d945721ff19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AES_CTR_xcrypt_buffer</definition>
        <argsstring>(struct AES_ctx *ctx, uint8_t *buf, size_t length)</argsstring>
        <name>AES_CTR_xcrypt_buffer</name>
        <param>
          <type>struct <ref refid="structAES__ctx" kindref="compound">AES_ctx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/aes.cpp" line="538" column="6" bodyfile="src/aes.cpp" bodystart="538" bodyend="569"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">This<sp/>is<sp/>an<sp/>implementation<sp/>of<sp/>the<sp/>AES<sp/>algorithm,<sp/>specifically<sp/>ECB,<sp/>CTR<sp/>and<sp/>CBC<sp/>mode.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">Block<sp/>size<sp/>can<sp/>be<sp/>chosen<sp/>in<sp/>aes.h<sp/>-<sp/>available<sp/>choices<sp/>are<sp/>AES128,<sp/>AES192,<sp/>AES256.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">The<sp/>implementation<sp/>is<sp/>verified<sp/>against<sp/>the<sp/>test<sp/>vectors<sp/>in:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>National<sp/>Institute<sp/>of<sp/>Standards<sp/>and<sp/>Technology<sp/>Special<sp/>Publication<sp/>800-38A<sp/>2001<sp/>ED</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">ECB-AES128</highlight></codeline>
<codeline lineno="10"><highlight class="comment">----------</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>plain-text:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>6bc1bee22e409f96e93d7e117393172a</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/>ae2d8a571e03ac9c9eb76fac45af8e51</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/>30c81c46a35ce411e5fbc1191a0a52ef</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>f69f2445df4f9b17ad2b417be66c3710</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>key:</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/>2b7e151628aed2a6abf7158809cf4f3c</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>resulting<sp/>cipher</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>3ad77bb40d7a3660a89ecaf32466ef97<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>f5d3d58503b9699de785895a96fdbaaf<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>43b1cd7f598ece23881b00e3ed030688<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>7b0c785e27e8ad3f8223207104725dd4<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">NOTE:<sp/><sp/><sp/>String<sp/>length<sp/>must<sp/>be<sp/>evenly<sp/>divisible<sp/>by<sp/>16byte<sp/>(str_len<sp/>%<sp/>16<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>You<sp/>should<sp/>pad<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>with<sp/>zeros<sp/>if<sp/>this<sp/>is<sp/>not<sp/>the<sp/>case.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>AES192/256<sp/>the<sp/>key<sp/>size<sp/>is<sp/>proportionally<sp/>larger.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Includes:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>CBC<sp/>mode,<sp/>for<sp/>memset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="aes_8h" kindref="compound">aes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defines:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>columns<sp/>comprising<sp/>a<sp/>state<sp/>in<sp/>AES.<sp/>This<sp/>is<sp/>a<sp/>constant<sp/>in<sp/>AES.<sp/>Value=4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Nb<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AES256)<sp/>&amp;&amp;<sp/>(AES256<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nk<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nr<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(AES192)<sp/>&amp;&amp;<sp/>(AES192<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nk<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nr<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nk<sp/>4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>32<sp/>bit<sp/>words<sp/>in<sp/>a<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>Nr<sp/>10<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>rounds<sp/>in<sp/>AES<sp/>Cipher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>jcallan@github<sp/>points<sp/>out<sp/>that<sp/>declaring<sp/>Multiply<sp/>as<sp/>a<sp/>function<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reduces<sp/>code<sp/>size<sp/>considerably<sp/>with<sp/>the<sp/>Keil<sp/>ARM<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>this<sp/>link<sp/>for<sp/>more<sp/>information:<sp/>https://github.com/kokke/tiny-AES-C/pull/3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MULTIPLY_AS_A_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>MULTIPLY_AS_A_FUNCTION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>variables:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state<sp/>-<sp/>array<sp/>holding<sp/>the<sp/>intermediate<sp/>results<sp/>during<sp/>decryption.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>[4][4];</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>lookup-tables<sp/>are<sp/>marked<sp/>const<sp/>so<sp/>they<sp/>can<sp/>be<sp/>placed<sp/>in<sp/>read-only<sp/>storage<sp/>instead<sp/>of<sp/>RAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>numbers<sp/>below<sp/>can<sp/>be<sp/>computed<sp/>dynamically<sp/>trading<sp/>ROM<sp/>for<sp/>RAM<sp/>-<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>useful<sp/>in<sp/>(embedded)<sp/>bootloader<sp/>applications,<sp/>where<sp/>ROM<sp/>is<sp/>often<sp/>limited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>sbox[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//0<sp/><sp/><sp/><sp/><sp/>1<sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/>3<sp/><sp/><sp/><sp/><sp/>4<sp/><sp/><sp/><sp/>5<sp/><sp/><sp/><sp/><sp/>6<sp/><sp/><sp/><sp/><sp/>7<sp/><sp/><sp/><sp/><sp/><sp/>8<sp/><sp/><sp/><sp/>9<sp/><sp/><sp/><sp/><sp/>A<sp/><sp/><sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/>C<sp/><sp/><sp/><sp/><sp/>D<sp/><sp/><sp/><sp/><sp/>E<sp/><sp/><sp/><sp/><sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>0x63,<sp/>0x7c,<sp/>0x77,<sp/>0x7b,<sp/>0xf2,<sp/>0x6b,<sp/>0x6f,<sp/>0xc5,<sp/>0x30,<sp/>0x01,<sp/>0x67,<sp/>0x2b,<sp/>0xfe,<sp/>0xd7,<sp/>0xab,<sp/>0x76,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>0xca,<sp/>0x82,<sp/>0xc9,<sp/>0x7d,<sp/>0xfa,<sp/>0x59,<sp/>0x47,<sp/>0xf0,<sp/>0xad,<sp/>0xd4,<sp/>0xa2,<sp/>0xaf,<sp/>0x9c,<sp/>0xa4,<sp/>0x72,<sp/>0xc0,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>0xb7,<sp/>0xfd,<sp/>0x93,<sp/>0x26,<sp/>0x36,<sp/>0x3f,<sp/>0xf7,<sp/>0xcc,<sp/>0x34,<sp/>0xa5,<sp/>0xe5,<sp/>0xf1,<sp/>0x71,<sp/>0xd8,<sp/>0x31,<sp/>0x15,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>0x04,<sp/>0xc7,<sp/>0x23,<sp/>0xc3,<sp/>0x18,<sp/>0x96,<sp/>0x05,<sp/>0x9a,<sp/>0x07,<sp/>0x12,<sp/>0x80,<sp/>0xe2,<sp/>0xeb,<sp/>0x27,<sp/>0xb2,<sp/>0x75,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>0x09,<sp/>0x83,<sp/>0x2c,<sp/>0x1a,<sp/>0x1b,<sp/>0x6e,<sp/>0x5a,<sp/>0xa0,<sp/>0x52,<sp/>0x3b,<sp/>0xd6,<sp/>0xb3,<sp/>0x29,<sp/>0xe3,<sp/>0x2f,<sp/>0x84,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>0x53,<sp/>0xd1,<sp/>0x00,<sp/>0xed,<sp/>0x20,<sp/>0xfc,<sp/>0xb1,<sp/>0x5b,<sp/>0x6a,<sp/>0xcb,<sp/>0xbe,<sp/>0x39,<sp/>0x4a,<sp/>0x4c,<sp/>0x58,<sp/>0xcf,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>0xd0,<sp/>0xef,<sp/>0xaa,<sp/>0xfb,<sp/>0x43,<sp/>0x4d,<sp/>0x33,<sp/>0x85,<sp/>0x45,<sp/>0xf9,<sp/>0x02,<sp/>0x7f,<sp/>0x50,<sp/>0x3c,<sp/>0x9f,<sp/>0xa8,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>0x51,<sp/>0xa3,<sp/>0x40,<sp/>0x8f,<sp/>0x92,<sp/>0x9d,<sp/>0x38,<sp/>0xf5,<sp/>0xbc,<sp/>0xb6,<sp/>0xda,<sp/>0x21,<sp/>0x10,<sp/>0xff,<sp/>0xf3,<sp/>0xd2,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>0xcd,<sp/>0x0c,<sp/>0x13,<sp/>0xec,<sp/>0x5f,<sp/>0x97,<sp/>0x44,<sp/>0x17,<sp/>0xc4,<sp/>0xa7,<sp/>0x7e,<sp/>0x3d,<sp/>0x64,<sp/>0x5d,<sp/>0x19,<sp/>0x73,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>0x60,<sp/>0x81,<sp/>0x4f,<sp/>0xdc,<sp/>0x22,<sp/>0x2a,<sp/>0x90,<sp/>0x88,<sp/>0x46,<sp/>0xee,<sp/>0xb8,<sp/>0x14,<sp/>0xde,<sp/>0x5e,<sp/>0x0b,<sp/>0xdb,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>0xe0,<sp/>0x32,<sp/>0x3a,<sp/>0x0a,<sp/>0x49,<sp/>0x06,<sp/>0x24,<sp/>0x5c,<sp/>0xc2,<sp/>0xd3,<sp/>0xac,<sp/>0x62,<sp/>0x91,<sp/>0x95,<sp/>0xe4,<sp/>0x79,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>0xe7,<sp/>0xc8,<sp/>0x37,<sp/>0x6d,<sp/>0x8d,<sp/>0xd5,<sp/>0x4e,<sp/>0xa9,<sp/>0x6c,<sp/>0x56,<sp/>0xf4,<sp/>0xea,<sp/>0x65,<sp/>0x7a,<sp/>0xae,<sp/>0x08,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>0xba,<sp/>0x78,<sp/>0x25,<sp/>0x2e,<sp/>0x1c,<sp/>0xa6,<sp/>0xb4,<sp/>0xc6,<sp/>0xe8,<sp/>0xdd,<sp/>0x74,<sp/>0x1f,<sp/>0x4b,<sp/>0xbd,<sp/>0x8b,<sp/>0x8a,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>0x70,<sp/>0x3e,<sp/>0xb5,<sp/>0x66,<sp/>0x48,<sp/>0x03,<sp/>0xf6,<sp/>0x0e,<sp/>0x61,<sp/>0x35,<sp/>0x57,<sp/>0xb9,<sp/>0x86,<sp/>0xc1,<sp/>0x1d,<sp/>0x9e,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>0xe1,<sp/>0xf8,<sp/>0x98,<sp/>0x11,<sp/>0x69,<sp/>0xd9,<sp/>0x8e,<sp/>0x94,<sp/>0x9b,<sp/>0x1e,<sp/>0x87,<sp/>0xe9,<sp/>0xce,<sp/>0x55,<sp/>0x28,<sp/>0xdf,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>0x8c,<sp/>0xa1,<sp/>0x89,<sp/>0x0d,<sp/>0xbf,<sp/>0xe6,<sp/>0x42,<sp/>0x68,<sp/>0x41,<sp/>0x99,<sp/>0x2d,<sp/>0x0f,<sp/>0xb0,<sp/>0x54,<sp/>0xbb,<sp/>0x16<sp/>};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>CBC<sp/>==<sp/>1)<sp/>||<sp/>(defined(ECB)<sp/>&amp;&amp;<sp/>ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>rsbox[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>0x52,<sp/>0x09,<sp/>0x6a,<sp/>0xd5,<sp/>0x30,<sp/>0x36,<sp/>0xa5,<sp/>0x38,<sp/>0xbf,<sp/>0x40,<sp/>0xa3,<sp/>0x9e,<sp/>0x81,<sp/>0xf3,<sp/>0xd7,<sp/>0xfb,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>0x7c,<sp/>0xe3,<sp/>0x39,<sp/>0x82,<sp/>0x9b,<sp/>0x2f,<sp/>0xff,<sp/>0x87,<sp/>0x34,<sp/>0x8e,<sp/>0x43,<sp/>0x44,<sp/>0xc4,<sp/>0xde,<sp/>0xe9,<sp/>0xcb,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>0x54,<sp/>0x7b,<sp/>0x94,<sp/>0x32,<sp/>0xa6,<sp/>0xc2,<sp/>0x23,<sp/>0x3d,<sp/>0xee,<sp/>0x4c,<sp/>0x95,<sp/>0x0b,<sp/>0x42,<sp/>0xfa,<sp/>0xc3,<sp/>0x4e,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>0x08,<sp/>0x2e,<sp/>0xa1,<sp/>0x66,<sp/>0x28,<sp/>0xd9,<sp/>0x24,<sp/>0xb2,<sp/>0x76,<sp/>0x5b,<sp/>0xa2,<sp/>0x49,<sp/>0x6d,<sp/>0x8b,<sp/>0xd1,<sp/>0x25,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>0x72,<sp/>0xf8,<sp/>0xf6,<sp/>0x64,<sp/>0x86,<sp/>0x68,<sp/>0x98,<sp/>0x16,<sp/>0xd4,<sp/>0xa4,<sp/>0x5c,<sp/>0xcc,<sp/>0x5d,<sp/>0x65,<sp/>0xb6,<sp/>0x92,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>0x6c,<sp/>0x70,<sp/>0x48,<sp/>0x50,<sp/>0xfd,<sp/>0xed,<sp/>0xb9,<sp/>0xda,<sp/>0x5e,<sp/>0x15,<sp/>0x46,<sp/>0x57,<sp/>0xa7,<sp/>0x8d,<sp/>0x9d,<sp/>0x84,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>0x90,<sp/>0xd8,<sp/>0xab,<sp/>0x00,<sp/>0x8c,<sp/>0xbc,<sp/>0xd3,<sp/>0x0a,<sp/>0xf7,<sp/>0xe4,<sp/>0x58,<sp/>0x05,<sp/>0xb8,<sp/>0xb3,<sp/>0x45,<sp/>0x06,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>0xd0,<sp/>0x2c,<sp/>0x1e,<sp/>0x8f,<sp/>0xca,<sp/>0x3f,<sp/>0x0f,<sp/>0x02,<sp/>0xc1,<sp/>0xaf,<sp/>0xbd,<sp/>0x03,<sp/>0x01,<sp/>0x13,<sp/>0x8a,<sp/>0x6b,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>0x3a,<sp/>0x91,<sp/>0x11,<sp/>0x41,<sp/>0x4f,<sp/>0x67,<sp/>0xdc,<sp/>0xea,<sp/>0x97,<sp/>0xf2,<sp/>0xcf,<sp/>0xce,<sp/>0xf0,<sp/>0xb4,<sp/>0xe6,<sp/>0x73,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>0x96,<sp/>0xac,<sp/>0x74,<sp/>0x22,<sp/>0xe7,<sp/>0xad,<sp/>0x35,<sp/>0x85,<sp/>0xe2,<sp/>0xf9,<sp/>0x37,<sp/>0xe8,<sp/>0x1c,<sp/>0x75,<sp/>0xdf,<sp/>0x6e,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>0x47,<sp/>0xf1,<sp/>0x1a,<sp/>0x71,<sp/>0x1d,<sp/>0x29,<sp/>0xc5,<sp/>0x89,<sp/>0x6f,<sp/>0xb7,<sp/>0x62,<sp/>0x0e,<sp/>0xaa,<sp/>0x18,<sp/>0xbe,<sp/>0x1b,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>0xfc,<sp/>0x56,<sp/>0x3e,<sp/>0x4b,<sp/>0xc6,<sp/>0xd2,<sp/>0x79,<sp/>0x20,<sp/>0x9a,<sp/>0xdb,<sp/>0xc0,<sp/>0xfe,<sp/>0x78,<sp/>0xcd,<sp/>0x5a,<sp/>0xf4,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>0x1f,<sp/>0xdd,<sp/>0xa8,<sp/>0x33,<sp/>0x88,<sp/>0x07,<sp/>0xc7,<sp/>0x31,<sp/>0xb1,<sp/>0x12,<sp/>0x10,<sp/>0x59,<sp/>0x27,<sp/>0x80,<sp/>0xec,<sp/>0x5f,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>0x60,<sp/>0x51,<sp/>0x7f,<sp/>0xa9,<sp/>0x19,<sp/>0xb5,<sp/>0x4a,<sp/>0x0d,<sp/>0x2d,<sp/>0xe5,<sp/>0x7a,<sp/>0x9f,<sp/>0x93,<sp/>0xc9,<sp/>0x9c,<sp/>0xef,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>0xa0,<sp/>0xe0,<sp/>0x3b,<sp/>0x4d,<sp/>0xae,<sp/>0x2a,<sp/>0xf5,<sp/>0xb0,<sp/>0xc8,<sp/>0xeb,<sp/>0xbb,<sp/>0x3c,<sp/>0x83,<sp/>0x53,<sp/>0x99,<sp/>0x61,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>0x17,<sp/>0x2b,<sp/>0x04,<sp/>0x7e,<sp/>0xba,<sp/>0x77,<sp/>0xd6,<sp/>0x26,<sp/>0xe1,<sp/>0x69,<sp/>0x14,<sp/>0x63,<sp/>0x55,<sp/>0x21,<sp/>0x0c,<sp/>0x7d<sp/>};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>round<sp/>constant<sp/>word<sp/>array,<sp/>Rcon[i],<sp/>contains<sp/>the<sp/>values<sp/>given<sp/>by<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>x<sp/>to<sp/>the<sp/>power<sp/>(i-1)<sp/>being<sp/>powers<sp/>of<sp/>x<sp/>(x<sp/>is<sp/>denoted<sp/>as<sp/>{02})<sp/>in<sp/>the<sp/>field<sp/>GF(2^8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>Rcon[11]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>0x8d,<sp/>0x01,<sp/>0x02,<sp/>0x04,<sp/>0x08,<sp/>0x10,<sp/>0x20,<sp/>0x40,<sp/>0x80,<sp/>0x1b,<sp/>0x36<sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Jordan<sp/>Goulder<sp/>points<sp/>out<sp/>in<sp/>PR<sp/>#12<sp/>(https://github.com/kokke/tiny-AES-C/pull/12),</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>that<sp/>you<sp/>can<sp/>remove<sp/>most<sp/>of<sp/>the<sp/>elements<sp/>in<sp/>the<sp/>Rcon<sp/>array,<sp/>because<sp/>they<sp/>are<sp/>unused.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>From<sp/>Wikipedia&apos;s<sp/>article<sp/>on<sp/>the<sp/>Rijndael<sp/>key<sp/>schedule<sp/>@<sp/>https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>&quot;Only<sp/>the<sp/>first<sp/>some<sp/>of<sp/>these<sp/>constants<sp/>are<sp/>actually<sp/>used<sp/>–<sp/>up<sp/>to<sp/>rcon[10]<sp/>for<sp/>AES-128<sp/>(as<sp/>11<sp/>round<sp/>keys<sp/>are<sp/>needed),<sp/></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/>up<sp/>to<sp/>rcon[8]<sp/>for<sp/>AES-192,<sp/>up<sp/>to<sp/>rcon[7]<sp/>for<sp/>AES-256.<sp/>rcon[0]<sp/>is<sp/>not<sp/>used<sp/>in<sp/>AES<sp/>algorithm.&quot;</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>functions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment">static<sp/>uint8_t<sp/>getSBoxValue(uint8_t<sp/>num)</highlight></codeline>
<codeline lineno="139"><highlight class="comment">{</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/>return<sp/>sbox[num];</highlight></codeline>
<codeline lineno="141"><highlight class="comment">}</highlight></codeline>
<codeline lineno="142"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>getSBoxValue(num)<sp/>(sbox[(num)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>produces<sp/>Nb(Nr+1)<sp/>round<sp/>keys.<sp/>The<sp/>round<sp/>keys<sp/>are<sp/>used<sp/>in<sp/>each<sp/>round<sp/>to<sp/>decrypt<sp/>the<sp/>states.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>KeyExpansion(uint8_t*<sp/>RoundKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>Key)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tempa[4];<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>the<sp/>column/row<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>round<sp/>key<sp/>is<sp/>the<sp/>key<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[(i<sp/>*<sp/>4)<sp/>+<sp/>0]<sp/>=<sp/>Key[(i<sp/>*<sp/>4)<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[(i<sp/>*<sp/>4)<sp/>+<sp/>1]<sp/>=<sp/>Key[(i<sp/>*<sp/>4)<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[(i<sp/>*<sp/>4)<sp/>+<sp/>2]<sp/>=<sp/>Key[(i<sp/>*<sp/>4)<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[(i<sp/>*<sp/>4)<sp/>+<sp/>3]<sp/>=<sp/>Key[(i<sp/>*<sp/>4)<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>round<sp/>keys<sp/>are<sp/>found<sp/>from<sp/>the<sp/>previous<sp/>round<sp/>keys.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/><ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref>;<sp/>i<sp/>&lt;<sp/><ref refid="aes_8cpp_1a1ae104196f1fc7af4751c5b9e07b1610" kindref="member">Nb</ref><sp/>*<sp/>(<ref refid="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" kindref="member">Nr</ref><sp/>+<sp/>1);<sp/>++i)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>-<sp/>1)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempa[0]=RoundKey[k<sp/>+<sp/>0];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempa[1]=RoundKey[k<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempa[2]=RoundKey[k<sp/>+<sp/>2];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempa[3]=RoundKey[k<sp/>+<sp/>3];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/><ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>shifts<sp/>the<sp/>4<sp/>bytes<sp/>in<sp/>a<sp/>word<sp/>to<sp/>the<sp/>left<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[a0,a1,a2,a3]<sp/>becomes<sp/>[a1,a2,a3,a0]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>RotWord()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>u8tmp<sp/>=<sp/>tempa[0];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[0]<sp/>=<sp/>tempa[1];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[1]<sp/>=<sp/>tempa[2];</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[2]<sp/>=<sp/>tempa[3];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[3]<sp/>=<sp/>u8tmp;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SubWord()<sp/>is<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>four-byte<sp/>input<sp/>word<sp/>and<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>applies<sp/>the<sp/>S-box<sp/>to<sp/>each<sp/>of<sp/>the<sp/>four<sp/>bytes<sp/>to<sp/>produce<sp/>an<sp/>output<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>Subword()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[0]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[0]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[1]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[1]);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[2]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[2]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[3]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[3]);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tempa[0]<sp/>=<sp/>tempa[0]<sp/>^<sp/>Rcon[i/<ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref>];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AES256)<sp/>&amp;&amp;<sp/>(AES256<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>%<sp/><ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref><sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>Subword()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[0]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[0]);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[1]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[1]);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[2]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[2]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempa[3]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>(tempa[3]);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>j<sp/>=<sp/>i<sp/>*<sp/>4;<sp/>k=(i<sp/>-<sp/><ref refid="aes_8cpp_1a7b1938df390b1afe917e8baa663c22af" kindref="member">Nk</ref>)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[j<sp/>+<sp/>0]<sp/>=<sp/>RoundKey[k<sp/>+<sp/>0]<sp/>^<sp/>tempa[0];</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[j<sp/>+<sp/>1]<sp/>=<sp/>RoundKey[k<sp/>+<sp/>1]<sp/>^<sp/>tempa[1];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[j<sp/>+<sp/>2]<sp/>=<sp/>RoundKey[k<sp/>+<sp/>2]<sp/>^<sp/>tempa[2];</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>RoundKey[j<sp/>+<sp/>3]<sp/>=<sp/>RoundKey[k<sp/>+<sp/>3]<sp/>^<sp/>tempa[3];</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1af6103754d8f46cb642b0041973e4102e" kindref="member">AES_init_ctx</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>key)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>KeyExpansion(ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>(CBC<sp/>==<sp/>1))<sp/>||<sp/>(defined(CTR)<sp/>&amp;&amp;<sp/>(CTR<sp/>==<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1a99d17d22ed909bd155007cdece29263a" kindref="member">AES_init_ctx_iv</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>iv)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>KeyExpansion(ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>memcpy<sp/>(ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>,<sp/>iv,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1afbdec54757622549b63838ea2fbc3cf6" kindref="member">AES_ctx_set_iv</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>iv)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>memcpy<sp/>(ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>,<sp/>iv,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>adds<sp/>the<sp/>round<sp/>key<sp/>to<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>round<sp/>key<sp/>is<sp/>added<sp/>to<sp/>the<sp/>state<sp/>by<sp/>an<sp/>XOR<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddRoundKey(uint8_t<sp/>round,<sp/><ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>RoundKey)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,j;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*state)[i][j]<sp/>^=<sp/>RoundKey[(round<sp/>*<sp/><ref refid="aes_8cpp_1a1ae104196f1fc7af4751c5b9e07b1610" kindref="member">Nb</ref><sp/>*<sp/>4)<sp/>+<sp/>(i<sp/>*<sp/><ref refid="aes_8cpp_1a1ae104196f1fc7af4751c5b9e07b1610" kindref="member">Nb</ref>)<sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>SubBytes<sp/>Function<sp/>Substitutes<sp/>the<sp/>values<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state<sp/>matrix<sp/>with<sp/>values<sp/>in<sp/>an<sp/>S-box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SubBytes(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*state)[j][i]<sp/>=<sp/><ref refid="aes_8cpp_1a5e1678341a98f95d48365ed9ccaa3586" kindref="member">getSBoxValue</ref>((*state)[j][i]);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ShiftRows()<sp/>function<sp/>shifts<sp/>the<sp/>rows<sp/>in<sp/>the<sp/>state<sp/>to<sp/>the<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>row<sp/>is<sp/>shifted<sp/>with<sp/>different<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Offset<sp/>=<sp/>Row<sp/>number.<sp/>So<sp/>the<sp/>first<sp/>row<sp/>is<sp/>not<sp/>shifted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShiftRows(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>uint8_t<sp/>temp;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>first<sp/>row<sp/>1<sp/>columns<sp/>to<sp/>left<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(*state)[0][1];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>(*state)[0][1]<sp/>=<sp/>(*state)[1][1];</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>(*state)[1][1]<sp/>=<sp/>(*state)[2][1];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>(*state)[2][1]<sp/>=<sp/>(*state)[3][1];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>(*state)[3][1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>second<sp/>row<sp/>2<sp/>columns<sp/>to<sp/>left<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(*state)[0][2];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>(*state)[0][2]<sp/>=<sp/>(*state)[2][2];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>(*state)[2][2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(*state)[1][2];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>(*state)[1][2]<sp/>=<sp/>(*state)[3][2];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>(*state)[3][2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>third<sp/>row<sp/>3<sp/>columns<sp/>to<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>temp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(*state)[0][3];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>(*state)[0][3]<sp/>=<sp/>(*state)[3][3];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>(*state)[3][3]<sp/>=<sp/>(*state)[2][3];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>(*state)[2][3]<sp/>=<sp/>(*state)[1][3];</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>(*state)[1][3]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/>xtime(uint8_t<sp/>x)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((x&lt;&lt;1)<sp/>^<sp/>(((x&gt;&gt;7)<sp/>&amp;<sp/>1)<sp/>*<sp/>0x1b));</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MixColumns<sp/>function<sp/>mixes<sp/>the<sp/>columns<sp/>of<sp/>the<sp/>state<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MixColumns(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>uint8_t<sp/>Tmp,<sp/>Tm,<sp/>t;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/><sp/><sp/>=<sp/>(*state)[i][0];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Tmp<sp/>=<sp/>(*state)[i][0]<sp/>^<sp/>(*state)[i][1]<sp/>^<sp/>(*state)[i][2]<sp/>^<sp/>(*state)[i][3]<sp/>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>Tm<sp/><sp/>=<sp/>(*state)[i][0]<sp/>^<sp/>(*state)[i][1]<sp/>;<sp/>Tm<sp/>=<sp/>xtime(Tm);<sp/><sp/>(*state)[i][0]<sp/>^=<sp/>Tm<sp/>^<sp/>Tmp<sp/>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>Tm<sp/><sp/>=<sp/>(*state)[i][1]<sp/>^<sp/>(*state)[i][2]<sp/>;<sp/>Tm<sp/>=<sp/>xtime(Tm);<sp/><sp/>(*state)[i][1]<sp/>^=<sp/>Tm<sp/>^<sp/>Tmp<sp/>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>Tm<sp/><sp/>=<sp/>(*state)[i][2]<sp/>^<sp/>(*state)[i][3]<sp/>;<sp/>Tm<sp/>=<sp/>xtime(Tm);<sp/><sp/>(*state)[i][2]<sp/>^=<sp/>Tm<sp/>^<sp/>Tmp<sp/>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>Tm<sp/><sp/>=<sp/>(*state)[i][3]<sp/>^<sp/>t<sp/>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tm<sp/>=<sp/>xtime(Tm);<sp/><sp/>(*state)[i][3]<sp/>^=<sp/>Tm<sp/>^<sp/>Tmp<sp/>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Multiply<sp/>is<sp/>used<sp/>to<sp/>multiply<sp/>numbers<sp/>in<sp/>the<sp/>field<sp/>GF(2^8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>last<sp/>call<sp/>to<sp/>xtime()<sp/>is<sp/>unneeded,<sp/>but<sp/>often<sp/>ends<sp/>up<sp/>generating<sp/>a<sp/>smaller<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>compiler<sp/>seems<sp/>to<sp/>be<sp/>able<sp/>to<sp/>vectorize<sp/>the<sp/>operation<sp/>better<sp/>this<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>https://github.com/kokke/tiny-AES-c/pull/34</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MULTIPLY_AS_A_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(uint8_t<sp/>x,<sp/>uint8_t<sp/>y)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((y<sp/>&amp;<sp/>1)<sp/>*<sp/>x)<sp/>^</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;1<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(x))<sp/>^</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;2<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(x)))<sp/>^</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;3<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(xtime(x))))<sp/>^</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;4<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(xtime(xtime(x))))));<sp/></highlight><highlight class="comment">/*<sp/>this<sp/>last<sp/>call<sp/>to<sp/>xtime()<sp/>can<sp/>be<sp/>omitted<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>Multiply(x,<sp/>y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/>((y<sp/>&amp;<sp/>1)<sp/>*<sp/>x)<sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;1<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(x))<sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;2<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(x)))<sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;3<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(xtime(x))))<sp/>^<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((y&gt;&gt;4<sp/>&amp;<sp/>1)<sp/>*<sp/>xtime(xtime(xtime(xtime(x))))))<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>CBC<sp/>==<sp/>1)<sp/>||<sp/>(defined(ECB)<sp/>&amp;&amp;<sp/>ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment">static<sp/>uint8_t<sp/>getSBoxInvert(uint8_t<sp/>num)</highlight></codeline>
<codeline lineno="341"><highlight class="comment">{</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>return<sp/>rsbox[num];</highlight></codeline>
<codeline lineno="343"><highlight class="comment">}</highlight></codeline>
<codeline lineno="344"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>getSBoxInvert(num)<sp/>(rsbox[(num)])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MixColumns<sp/>function<sp/>mixes<sp/>the<sp/>columns<sp/>of<sp/>the<sp/>state<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>method<sp/>used<sp/>to<sp/>multiply<sp/>may<sp/>be<sp/>difficult<sp/>to<sp/>understand<sp/>for<sp/>the<sp/>inexperienced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Please<sp/>use<sp/>the<sp/>references<sp/>to<sp/>gain<sp/>more<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InvMixColumns(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>uint8_t<sp/>a,<sp/>b,<sp/>c,<sp/>d;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(*state)[i][0];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>=<sp/>(*state)[i][1];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(*state)[i][2];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>(*state)[i][3];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>(*state)[i][0]<sp/>=<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(a,<sp/>0x0e)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(b,<sp/>0x0b)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(c,<sp/>0x0d)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(d,<sp/>0x09);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>(*state)[i][1]<sp/>=<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(a,<sp/>0x09)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(b,<sp/>0x0e)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(c,<sp/>0x0b)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(d,<sp/>0x0d);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>(*state)[i][2]<sp/>=<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(a,<sp/>0x0d)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(b,<sp/>0x09)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(c,<sp/>0x0e)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(d,<sp/>0x0b);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>(*state)[i][3]<sp/>=<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(a,<sp/>0x0b)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(b,<sp/>0x0d)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(c,<sp/>0x09)<sp/>^<sp/><ref refid="aes_8cpp_1aca7cce176b8cdd27f61d3dcf5910b6bd" kindref="member">Multiply</ref>(d,<sp/>0x0e);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>SubBytes<sp/>Function<sp/>Substitutes<sp/>the<sp/>values<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>state<sp/>matrix<sp/>with<sp/>values<sp/>in<sp/>an<sp/>S-box.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InvSubBytes(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*state)[j][i]<sp/>=<sp/><ref refid="aes_8cpp_1a4223d41bc5587f9c0b6e499004403967" kindref="member">getSBoxInvert</ref>((*state)[j][i]);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InvShiftRows(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>uint8_t<sp/>temp;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>first<sp/>row<sp/>1<sp/>columns<sp/>to<sp/>right<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>(*state)[3][1];</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>(*state)[3][1]<sp/>=<sp/>(*state)[2][1];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>(*state)[2][1]<sp/>=<sp/>(*state)[1][1];</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>(*state)[1][1]<sp/>=<sp/>(*state)[0][1];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>(*state)[0][1]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>second<sp/>row<sp/>2<sp/>columns<sp/>to<sp/>right<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>(*state)[0][2];</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>(*state)[0][2]<sp/>=<sp/>(*state)[2][2];</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>(*state)[2][2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>(*state)[1][2];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>(*state)[1][2]<sp/>=<sp/>(*state)[3][2];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>(*state)[3][2]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>third<sp/>row<sp/>3<sp/>columns<sp/>to<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>temp<sp/>=<sp/>(*state)[0][3];</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>(*state)[0][3]<sp/>=<sp/>(*state)[1][3];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>(*state)[1][3]<sp/>=<sp/>(*state)[2][3];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>(*state)[2][3]<sp/>=<sp/>(*state)[3][3];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>(*state)[3][3]<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>CBC<sp/>==<sp/>1)<sp/>||<sp/>(defined(ECB)<sp/>&amp;&amp;<sp/>ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cipher<sp/>is<sp/>the<sp/>main<sp/>function<sp/>that<sp/>encrypts<sp/>the<sp/>PlainText.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Cipher(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>RoundKey)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>uint8_t<sp/>round<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>First<sp/>round<sp/>key<sp/>to<sp/>the<sp/>state<sp/>before<sp/>starting<sp/>the<sp/>rounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>AddRoundKey(0,<sp/>state,<sp/>RoundKey);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>will<sp/>be<sp/>Nr<sp/>rounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>Nr-1<sp/>rounds<sp/>are<sp/>identical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>Nr<sp/>rounds<sp/>are<sp/>executed<sp/>in<sp/>the<sp/>loop<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>one<sp/>without<sp/>MixColumns()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>1;<sp/>;<sp/>++round)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>SubBytes(state);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>ShiftRows(state);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(round<sp/>==<sp/><ref refid="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" kindref="member">Nr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>MixColumns(state);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>AddRoundKey(round,<sp/>state,<sp/>RoundKey);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>round<sp/>key<sp/>to<sp/>last<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>AddRoundKey(<ref refid="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" kindref="member">Nr</ref>,<sp/>state,<sp/>RoundKey);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>CBC<sp/>==<sp/>1)<sp/>||<sp/>(defined(ECB)<sp/>&amp;&amp;<sp/>ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InvCipher(<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*<sp/>state,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>RoundKey)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>uint8_t<sp/>round<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>First<sp/>round<sp/>key<sp/>to<sp/>the<sp/>state<sp/>before<sp/>starting<sp/>the<sp/>rounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>AddRoundKey(<ref refid="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" kindref="member">Nr</ref>,<sp/>state,<sp/>RoundKey);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>will<sp/>be<sp/>Nr<sp/>rounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>Nr-1<sp/>rounds<sp/>are<sp/>identical.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>Nr<sp/>rounds<sp/>are<sp/>executed<sp/>in<sp/>the<sp/>loop<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Last<sp/>one<sp/>without<sp/>InvMixColumn()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(round<sp/>=<sp/>(<ref refid="aes_8cpp_1a9d210afc812225ee0a0bcd51bb984246" kindref="member">Nr</ref><sp/>-<sp/>1);<sp/>;<sp/>--round)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>InvShiftRows(state);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>InvSubBytes(state);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>AddRoundKey(round,<sp/>state,<sp/>RoundKey);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(round<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>InvMixColumns(state);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>(defined(CBC)<sp/>&amp;&amp;<sp/>CBC<sp/>==<sp/>1)<sp/>||<sp/>(defined(ECB)<sp/>&amp;&amp;<sp/>ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Public<sp/>functions:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">/*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB)<sp/>&amp;&amp;<sp/>(ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1a233447aeecf56715c358c518acb908ed" kindref="member">AES_ECB_encrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/>uint8_t*<sp/>buf)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>function<sp/>call<sp/>encrypts<sp/>the<sp/>PlainText<sp/>with<sp/>the<sp/>Key<sp/>using<sp/>AES<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>Cipher((<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*)buf,<sp/>ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1aa82deb7667cd7b19bbe783d2990642ad" kindref="member">AES_ECB_decrypt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/>uint8_t*<sp/>buf)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>function<sp/>call<sp/>decrypts<sp/>the<sp/>PlainText<sp/>with<sp/>the<sp/>Key<sp/>using<sp/>AES<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>InvCipher((<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*)buf,<sp/>ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>defined(ECB)<sp/>&amp;&amp;<sp/>(ECB<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CBC)<sp/>&amp;&amp;<sp/>(CBC<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XorWithIv(uint8_t*<sp/>buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>Iv)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>;<sp/>++i)<sp/></highlight><highlight class="comment">//<sp/>The<sp/>block<sp/>in<sp/>AES<sp/>is<sp/>always<sp/>128bit<sp/>no<sp/>matter<sp/>the<sp/>key<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>^=<sp/>Iv[i];</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1a296bd30323044b07d69e0e3b5f676281" kindref="member">AES_CBC_encrypt_buffer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref><sp/>*ctx,<sp/>uint8_t*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*Iv<sp/>=<sp/>ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i<sp/>+=<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>XorWithIv(buf,<sp/>Iv);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>Cipher((<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*)buf,<sp/>ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>Iv<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>Iv<sp/>in<sp/>ctx<sp/>for<sp/>next<sp/>call<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>memcpy(ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>,<sp/>Iv,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1a0672c442747b26b691202c493a08a104" kindref="member">AES_CBC_decrypt_buffer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/>uint8_t*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>uint8_t<sp/>storeNextIv[<ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>];</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i<sp/>+=<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(storeNextIv,<sp/>buf,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>InvCipher((<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*)buf,<sp/>ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>XorWithIv(buf,<sp/>ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>,<sp/>storeNextIv,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>defined(CBC)<sp/>&amp;&amp;<sp/>(CBC<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CTR)<sp/>&amp;&amp;<sp/>(CTR<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Symmetrical<sp/>operation:<sp/>same<sp/>function<sp/>for<sp/>encrypting<sp/>as<sp/>for<sp/>decrypting.<sp/>Note<sp/>any<sp/>IV/nonce<sp/>should<sp/>never<sp/>be<sp/>reused<sp/>with<sp/>the<sp/>same<sp/>key<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="aes_8cpp_1aa585f26e880ce9a112dc4d945721ff19" kindref="member">AES_CTR_xcrypt_buffer</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structAES__ctx" kindref="compound">AES_ctx</ref>*<sp/>ctx,<sp/>uint8_t*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>uint8_t<sp/>buffer[<ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>];</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bi;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>bi<sp/>=<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>;<sp/>i<sp/>&lt;<sp/>length;<sp/>++i,<sp/>++bi)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bi<sp/>==<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>)<sp/></highlight><highlight class="comment">/*<sp/>we<sp/>need<sp/>to<sp/>regen<sp/>xor<sp/>compliment<sp/>in<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffer,<sp/>ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>,<sp/><ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Cipher((<ref refid="aes_8cpp_1a35dbb26673d196810a7f6eac0ac632ec" kindref="member">state_t</ref>*)buffer,ctx-&gt;<ref refid="structAES__ctx_1aa475fe62fd5774891c7a42596f6d9c2e" kindref="member">RoundKey</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>Iv<sp/>and<sp/>handle<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(bi<sp/>=<sp/>(<ref refid="aes_8h_1ada62b7b09dab0d7ef92c04364b16b5b5" kindref="member">AES_BLOCKLEN</ref><sp/>-<sp/>1);<sp/>bi<sp/>&gt;=<sp/>0;<sp/>--bi)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inc<sp/>will<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>[bi]<sp/>==<sp/>255)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>[bi]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structAES__ctx_1a1fa4921f7eeaca82eb974899edcdef3a" kindref="member">Iv</ref>[bi]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>(buf[i]<sp/>^<sp/>buffer[bi]);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>#if<sp/>defined(CTR)<sp/>&amp;&amp;<sp/>(CTR<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/aes.cpp"/>
  </compounddef>
</doxygen>
